#!/usr/bin/env Rscript
## tigerbot is a small tool and slack app that allows us to send
## messages to channels and users in the teambengaltiger workspace
## from the command line.

## Setup dependencies
required.packages <- c("argparser", "assertthat", "crayon", "dplyr", "httr", "dotenv", "jsonlite", "stringr")
packages.to.install <- !sapply(required.packages, requireNamespace, quietly = TRUE)
install <- identical(as.character(commandArgs(trailingOnly = TRUE)[1]), "install")
if (install)
    install.packages(required.packages[packages.to.install])
packages.to.install <- !sapply(required.packages, requireNamespace, quietly = TRUE)
if (any(packages.to.install))
    stop (paste0("You have to install the following packages before you can run this script: \n\n",
                 paste0(required.packages[packages.to.install],
                        collapse = "\n"), "\n\n",
                 "Run: \n\n",
                 "tigerbot install \n\n",
                 "to do so or install these packages manually."))

## Setup arguments
parser <- argparser::arg_parser("tigerbot")
parser <- argparser::add_argument(parser, arg = "name", help = "The name of the user or channel to post to. Defaults to user in which case name is assumed to be the users real name")
parser <- argparser::add_argument(parser, arg = "message", help = "The message to send", default = "")
parser <- argparser::add_argument(parser, arg = "--token", help = "The Slack token. The default behaviour is to read this token from the SLACK_TOKEN environment variable. You can define this variable explicitly, for example SLACK_TOKEN='your token here' tigerbot, or in .env in the working directoy. You can override the default behaviour by providing the token here.")
parser <- argparser::add_argument(parser, arg = "--email", help = "Indicates that name is a user email rather than name", flag = TRUE)
parser <- argparser::add_argument(parser, arg = "--channel", help = "Indicates that name is a channel rather than a user", flag = TRUE)
parser <- argparser::add_argument(parser, arg = "--no-confirm", help = "Indicates that tigerbot should skip asking for confirmation before sending the message", flag = TRUE)
arguments <- argparser::parse_args(parser)
attach(arguments[-1]) # The first entry is empty and an empty entry cannot be attached

## Check arguments
at <- function(x) invisible(assertthat::assert_that(x))
at(is.character(name))
at(is.character(message))
at(is.character(token) | is.na(token))
at(is.logical(email))
at(is.logical(channel))
at(is.logical(no_confirm))
if (email & channel)
    stop ("Both mail and channel cannot be set, choose one")
## Define pipe operator, for convenience
`%>%` <- dplyr::`%>%`

## Get slack token
current.path <- "."
default.path <- paste0("/opt/tigerbot")
paths <- c(current.path, default.path)
files <- sapply(paths, function(x) file.path(x, ".env"))
if (is.na(token)) {
    exists <- sapply(files, file.exists)
    token <- Sys.getenv("SLACK_TOKEN")
    if (token == "" & any(exists))
        dotenv::load_dot_env(files[exists][1])
    token <- Sys.getenv("SLACK_TOKEN")        
}
if (token == "") 
    stop (stringr::str_wrap("The SLACK_TOKEN environment variable is not set. Either set it, put it in .env, or supply the token using the --token argument"))


## Define authentication string
auth <- paste0("Bearer ", token)

## Define base url
base.url <- "https://slack.com/api/"

## Find user or channel ID
cat(paste0("Contacting teambengaltiger...\n"))
identity <- "member"
method <- "users.list"
table.name <- "members"
name.name <- "real_name"
header <- httr::add_headers(Authorization = auth)
body <- NULL
query <- NULL
if (email) {
    method <- "users.lookupByEmail"
    table.name <- "user"
    query <- list(email = name)
    header <- httr::add_headers(Authorization = auth, "Content-Type" = "application/x-www-form-urlencoded")
}
if (channel) {
    method <- "conversations.list"
    table.name <- "channels"
    identity <- "channel"
    name.name <- "name"
    header <- httr::add_headers(Authorization = auth, email = name)
}
get.url <- paste0(base.url, method)
get.response <- httr::GET(url = get.url, header, query = query) %>%
    httr::content(as = "text") %>%
    jsonlite::fromJSON()
if (!get.response$ok)
    stop (stringr::str_wrap(paste0("Your request to the Slack API failed with the error: ", response$error)))
info.data <- get.response[[table.name]]
if (email) {
    info <- info.data
    id <- info$id
    name <- info$real_name
} else {
    info.names <- info.data[, name.name]
    info <- info.data[grepl(pattern = name, x = info.names, ignore.case = TRUE), ]
    if (nrow(info) == 0)
        stop (stringr::str_wrap(paste0("There is no ", identity, " named ", name)))
    if (nrow(info) > 1)
        stop (stringr::str_wrap(paste0("There are more than one ", identity, " matching ", name, ":\n",
                                       paste0(info[, name.name], collapse = ", "), ". ",
                                       "Please provide a more specific name.")))
    name <- info[, name.name]
    id <- info %>%
        dplyr::select(id) %>%
        as.character()
}

## Ask for confirmation
cat(paste0("The message will be posted to the ", identity, " ", name, ". \n"))
if (!no_confirm) {
    valid <- FALSE
    cat("\nAre you sure you want to post the message? (Yes/No) \n")
    while (!valid) {
        answer <- readLines(con = "stdin", n = 1)
        valid <- any(grepl(answer, c("yes", "no"), ignore.case = TRUE))
        if (!valid)
            cat("Please type either yes or no")
    }
    if (answer == "n")
        stop ("Posting message aborted")
}
 
## Post message
post.url <- paste0(base.url, "chat.postMessage")
post.response <- httr::POST(url = post.url, httr::add_headers(Authorization = auth), body = list(channel = id, text = message)) %>%
    httr::content(as = "text") %>%
    jsonlite::fromJSON()
if (!post.response$ok)
    stop (stringr::str_wrap(paste0("Your request to the Slack API failed with the error: ", response$error)))
cat(crayon::green(paste0("\n\nMessage successfully posted to the ", identity, " ", name, "!\n\n")))
